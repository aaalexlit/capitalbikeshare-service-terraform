name: apply-to-aws
on:
  repository_dispatch: 
  workflow_dispatch:
    inputs:
      environment:
        description: "What environment to act on"
        type: choice
        required: true
        options:
          - stg
          - prod
        default: stg
      destroy:
        description: "Destroy the infra"
        default: false
        type: boolean
      ecr-only:
        default: false
        type: boolean
jobs:
  apply-ecr:
    if: ${{ !fromJson(inputs.destroy) && fromJson(inputs.ecr-only) }}
    runs-on: ubuntu-latest
    outputs:
      ecr_repository_url: ${{ steps.tf-apply-ecr.outputs.ecr_repository_url }}
    steps:
      - name: check out repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
      - name: TF plan ECR
        id: tf-plan-ecr
        run: |
          terraform init -reconfigure -backend-config="environments/${{ inputs.environment }}/backend.config"
          terraform plan -target=aws_ecr_repository.prediction_service_ecr_repo -out=ecr_repo.tfplan --var-file="environments/${{ inputs.environment }}/environment.tfvars"
      - name: TF apply ECR
        id: tf-apply-ecr
        if: ${{ steps.tf-plan-ecr.outcome }} == 'success'
        run: |
          terraform apply ecr_repo.tfplan
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT

  apply:
    if: ${{ !fromJson(inputs.destroy) && !fromJson(inputs.ecr-only) }}
    runs-on: ubuntu-latest
    outputs:
      ecr_repository_url: ${{ steps.tf-apply.outputs.ecr_repository_url }}
      app_url: "http://${{ steps.tf-apply.outputs.app_url }}"
      task_definition_json: ${{ steps.tf-apply.outputs.task_definition_json }}
      container_name: ${{ steps.tf-apply.outputs.container_name }}
      ecs_service: ${{ steps.tf-apply.outputs.ecs_service }}
      ecs_cluster: ${{ steps.tf-apply.outputs.ecs_cluster }}

    steps:
      - name: check out repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: TF plan
        id: tf-plan
        run: |
          terraform init -reconfigure -backend-config="environments/${{inputs.environment}}/backend.config" \
          && terraform plan --var-file="environments/${{inputs.environment}}/environment.tfvars"

      - name: TF apply
        id: tf-apply
        if: ${{ steps.tf-plan.outcome }} == 'success'
        run: |
          terraform apply -auto-approve --var-file="environments/${{inputs.environment}}/environment.tfvars"
          echo "ecr_repository_url=$(terraform output -raw ecr_repository_url)" >> $GITHUB_OUTPUT
          echo "app_url=$(terraform output -raw app_url)" >> $GITHUB_OUTPUT
          echo "task_definition_json=$(terraform output -raw task_definition_json)" >> $GITHUB_OUTPUT
          echo "container_name=$(terraform output -raw container_name)" >> $GITHUB_OUTPUT
          echo "ecs_service=$(terraform output -raw ecs_service)" >> $GITHUB_OUTPUT
          echo "ecs_cluster=$(terraform output -raw ecs_cluster)" >> $GITHUB_OUTPUT

  destroy:
    if: ${{ fromJson(inputs.destroy) }}
    runs-on: ubuntu-latest
    steps:
      - name: check out repo
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: TF destroy
        id: tf-destroy
        run: |
          terraform init -reconfigure -backend-config="environments/${{inputs.environment}}/backend.config"
          terraform destroy -auto-approve -var-file="environments/${{inputs.environment}}/environment.tfvars"
